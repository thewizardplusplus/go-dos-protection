// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package dosProtectionUsecasesMocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	powValueTypes "github.com/thewizardplusplus/go-pow/value-types"
)

// NewMockHashProvider creates a new instance of MockHashProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHashProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHashProvider {
	mock := &MockHashProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockHashProvider is an autogenerated mock type for the HashProvider type
type MockHashProvider struct {
	mock.Mock
}

type MockHashProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHashProvider) EXPECT() *MockHashProvider_Expecter {
	return &MockHashProvider_Expecter{mock: &_m.Mock}
}

// ProvideHashByName provides a mock function for the type MockHashProvider
func (_mock *MockHashProvider) ProvideHashByName(ctx context.Context, hashName string) (powValueTypes.Hash, error) {
	ret := _mock.Called(ctx, hashName)

	if len(ret) == 0 {
		panic("no return value specified for ProvideHashByName")
	}

	var r0 powValueTypes.Hash
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (powValueTypes.Hash, error)); ok {
		return returnFunc(ctx, hashName)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) powValueTypes.Hash); ok {
		r0 = returnFunc(ctx, hashName)
	} else {
		r0 = ret.Get(0).(powValueTypes.Hash)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, hashName)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockHashProvider_ProvideHashByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProvideHashByName'
type MockHashProvider_ProvideHashByName_Call struct {
	*mock.Call
}

// ProvideHashByName is a helper method to define mock.On call
//   - ctx
//   - hashName
func (_e *MockHashProvider_Expecter) ProvideHashByName(ctx interface{}, hashName interface{}) *MockHashProvider_ProvideHashByName_Call {
	return &MockHashProvider_ProvideHashByName_Call{Call: _e.mock.On("ProvideHashByName", ctx, hashName)}
}

func (_c *MockHashProvider_ProvideHashByName_Call) Run(run func(ctx context.Context, hashName string)) *MockHashProvider_ProvideHashByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockHashProvider_ProvideHashByName_Call) Return(hash powValueTypes.Hash, err error) *MockHashProvider_ProvideHashByName_Call {
	_c.Call.Return(hash, err)
	return _c
}

func (_c *MockHashProvider_ProvideHashByName_Call) RunAndReturn(run func(ctx context.Context, hashName string) (powValueTypes.Hash, error)) *MockHashProvider_ProvideHashByName_Call {
	_c.Call.Return(run)
	return _c
}
