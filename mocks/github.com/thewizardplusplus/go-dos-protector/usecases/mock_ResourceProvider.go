// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package dosProtectorUsecasesMocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	powValueTypes "github.com/thewizardplusplus/go-pow/value-types"
)

// NewMockResourceProvider creates a new instance of MockResourceProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockResourceProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockResourceProvider {
	mock := &MockResourceProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockResourceProvider is an autogenerated mock type for the ResourceProvider type
type MockResourceProvider struct {
	mock.Mock
}

type MockResourceProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockResourceProvider) EXPECT() *MockResourceProvider_Expecter {
	return &MockResourceProvider_Expecter{mock: &_m.Mock}
}

// ProvideResource provides a mock function for the type MockResourceProvider
func (_mock *MockResourceProvider) ProvideResource(ctx context.Context) (powValueTypes.Resource, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ProvideResource")
	}

	var r0 powValueTypes.Resource
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (powValueTypes.Resource, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) powValueTypes.Resource); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(powValueTypes.Resource)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockResourceProvider_ProvideResource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProvideResource'
type MockResourceProvider_ProvideResource_Call struct {
	*mock.Call
}

// ProvideResource is a helper method to define mock.On call
//   - ctx
func (_e *MockResourceProvider_Expecter) ProvideResource(ctx interface{}) *MockResourceProvider_ProvideResource_Call {
	return &MockResourceProvider_ProvideResource_Call{Call: _e.mock.On("ProvideResource", ctx)}
}

func (_c *MockResourceProvider_ProvideResource_Call) Run(run func(ctx context.Context)) *MockResourceProvider_ProvideResource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockResourceProvider_ProvideResource_Call) Return(resource powValueTypes.Resource, err error) *MockResourceProvider_ProvideResource_Call {
	_c.Call.Return(resource, err)
	return _c
}

func (_c *MockResourceProvider_ProvideResource_Call) RunAndReturn(run func(ctx context.Context) (powValueTypes.Resource, error)) *MockResourceProvider_ProvideResource_Call {
	_c.Call.Return(run)
	return _c
}
