// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package dosProtectorAdapterClientsMocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	dosProtectorUsecaseModels "github.com/thewizardplusplus/go-dos-protector/usecases/models"
	pow "github.com/thewizardplusplus/go-pow"
)

// NewMockDoSProtectorUsecase creates a new instance of MockDoSProtectorUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDoSProtectorUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDoSProtectorUsecase {
	mock := &MockDoSProtectorUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDoSProtectorUsecase is an autogenerated mock type for the DoSProtectorUsecase type
type MockDoSProtectorUsecase struct {
	mock.Mock
}

type MockDoSProtectorUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDoSProtectorUsecase) EXPECT() *MockDoSProtectorUsecase_Expecter {
	return &MockDoSProtectorUsecase_Expecter{mock: &_m.Mock}
}

// SolveChallenge provides a mock function for the type MockDoSProtectorUsecase
func (_mock *MockDoSProtectorUsecase) SolveChallenge(ctx context.Context, params dosProtectorUsecaseModels.SolveChallengeParams) (pow.Solution, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for SolveChallenge")
	}

	var r0 pow.Solution
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, dosProtectorUsecaseModels.SolveChallengeParams) (pow.Solution, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, dosProtectorUsecaseModels.SolveChallengeParams) pow.Solution); ok {
		r0 = returnFunc(ctx, params)
	} else {
		r0 = ret.Get(0).(pow.Solution)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, dosProtectorUsecaseModels.SolveChallengeParams) error); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDoSProtectorUsecase_SolveChallenge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SolveChallenge'
type MockDoSProtectorUsecase_SolveChallenge_Call struct {
	*mock.Call
}

// SolveChallenge is a helper method to define mock.On call
//   - ctx
//   - params
func (_e *MockDoSProtectorUsecase_Expecter) SolveChallenge(ctx interface{}, params interface{}) *MockDoSProtectorUsecase_SolveChallenge_Call {
	return &MockDoSProtectorUsecase_SolveChallenge_Call{Call: _e.mock.On("SolveChallenge", ctx, params)}
}

func (_c *MockDoSProtectorUsecase_SolveChallenge_Call) Run(run func(ctx context.Context, params dosProtectorUsecaseModels.SolveChallengeParams)) *MockDoSProtectorUsecase_SolveChallenge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dosProtectorUsecaseModels.SolveChallengeParams))
	})
	return _c
}

func (_c *MockDoSProtectorUsecase_SolveChallenge_Call) Return(solution pow.Solution, err error) *MockDoSProtectorUsecase_SolveChallenge_Call {
	_c.Call.Return(solution, err)
	return _c
}

func (_c *MockDoSProtectorUsecase_SolveChallenge_Call) RunAndReturn(run func(ctx context.Context, params dosProtectorUsecaseModels.SolveChallengeParams) (pow.Solution, error)) *MockDoSProtectorUsecase_SolveChallenge_Call {
	_c.Call.Return(run)
	return _c
}
